/*────────────────────────────────────────────────────────────────────────────────────────────────*/
/*┌────────────────────┐
  │ Структура столбцов │
  └────────────────────┘
┌────────────┬───────────┬──────────┬─────────────┬───────────┐
│     1      │     2     │    3     │      4      │     5     │
└────────────┼───────────┼──────────┼─────────────┼───────────┘
  colTickers │ colCounts │ colCosts │ colPercents │ colOffers 
┌────────────┴───────────┴──────────┴─────────────┴───────────┐
│       LKOH           3      20175          44.0             │
│       NVTK           7       7152          15.6          +1 │
│       PHOR           2      11628          25.4             │
│       IRAO        1700       6815          14.9        +100 │
│       RUBB        1350         78           0.2             │
└─────────────────────────────────────────────────────────────┘
/*┌──────────────────────┐
  │ Обращение к столбцам │
  └──────────────────────┘
// Без столбцов
    this.edit(function() {})
    
// Конкретные номера столбцов
    this.edit(2, 4, function(colCounts, colPercents) {})
    
// Диапазон столбцов от 2 по 4
    this.edit(~2, ~4, function(colCounts, colCosts, colPercents) {})
    
// Количество столбцов начиная с первого
    this.edit(~5, function(colTickers, colCounts, colCosts, colPercents, colOffers) {})
    
/*────────────────────────────────────────────────────────────────────────────────────────────────*/

class Table {
/*┌───────────────────────┐
  │ Создает новую таблицу │
  └───────────────────────┘*/
    constructor(...args) {
    // Создаем список пределов таблицы
        this.limits = [];
        
    // Создаем список аргументов по типу
        let types = {
            'string': v => this.value = v,           // Содержимое таблицы
            'number': v => this.limits.push(v),      // Номер столбца
            'boolean': v => this.isSaveEmptyRows = v // Флаг сохранять пустые ряды
        };
        
    // Проходим по списку аргументов
        args.forEach(arg => types[typeof arg](arg));
    }
    
/*┌───────────────────────────────┐
  │ Возвращает содержимое таблицы │
  └───────────────────────────────┘*/
    get value() {
    // Проверяем текущее содержимое таблицы
        if (this.content === void 0) {
        // Обновляем текущую таблицу
            this.update();
        }
        
    // Возвращаем содержимое таблицы
        return this.content;
    }
    
/*┌────────────────────────────┐
  │ Создает содержимое таблицы │
  └────────────────────────────┘*/
    set value(content = '') {
    // Обнуляем содержимое таблицы
        delete this.content;
        
    // Переводим строку в массив
        content = String(content).split('\n');
        
    // Создаем список рядов
        this.rows = content.map(line => line.split(/\s+/).filter(v => v !== ''));
        
    // Удаляем пустые ряды
        let rows = this.rows.filter(row => row.length);
        
    // Проверяем список пределов таблицы
        if (this.limits.length > 0) {
        // Удаляем столбцы вне списка пределов таблицы
            rows = rows.map(row => row.filter((col, i) => {
                return this.range(this.limits).includes(i);
            }));
        }
        
    // Получаем максимальное количество столбцов
        let length = rows.reduce((length, row) => {
            return length < row.length ? row.length : length;
        }, 0);
        
    // Создаем список столбцов
        this.cols = Array(length).fill().map(col => []);
        
    // Проходим по списку рядов
        rows.forEach((row) => {
        // Проходим по списку столбцов
            this.cols.forEach((col, i) => {
            // Создаем новый столбец
                col.push(row[i]||'');
            });
        });
    }
    
/*┌───────────────────────────┐
  │ Обновляет текущую таблицу │
  └───────────────────────────┘*/
    update() {
    // Выравниваем столбцы по правому краю (отступы слева)
        this.cols = this.cols.map((col) => {
            return this.toPads(col, 'right');
        });
        
    // Создаем порядковый номер
        let i = -1;
        
    // Удаляем пустые ряды
        if (!this.isSaveEmptyRows) {
        // Проходим по структуре столбцов (столбцы из первого ряда)
            this.content = this.col(0).map((cell, i) => {
                return this.cols.map(col => col[i]).join(' ');
            }).join('\n');
        }
        
    // Сохраняем пустые ряды
        else {
        // Проходим по списку рядов
            this.content = this.rows.map((row) => {
            // Увеличиваем порядковый номер
                i += row.length ? 1 : 0;
                
            // Возвращаем результат
                return !row.length ? '' : this.cols.map(col => col[i]).join(' ');
            }).join('\n');
        }
    }
    
/*┌───────────────────────────────────┐
  │ Создает диапазон номеров столбцов │
  └───────────────────────────────────┘*/
    range(cols = []) {
    // Передано количество столбцов (от 0 до cols[0])
        if (cols.length == 1 && cols[0] < 0) {
            return Array(~cols[0]).fill().map((c, i) => i);
        }
        
    // Передан диапазон столбцов (от cols[0] до cols[1])
        else if (cols.length == 2 && cols[0] < 0 && cols[1] < 0) {
            return Array(~cols[1] - ~cols[0] + 1).fill().map((c, i) => i + ~cols[0] - 1);
        }
        
    // Переданы конкретные номера столбцов
        else {
            return cols.map(v => v - 1);
        }
    }
    
/*┌───────────────────────────────────────────────────┐
  │ Прерывает дальнейшее внесение изменений в таблицу │
  └───────────────────────────────────────────────────┘*/
    get break() {
        this.isBreak = true;
    }
    
/*┌───────────────────────────────┐
  │ Добавляет изменения в таблицу │
  └───────────────────────────────┘*/
    edit(...args) {
    // Проверяем брэк
        if (this.isBreak) return this;
        
    // Создаем колбэк
        let callback;
        
    // Создаем список столбцов
        let cols = [];
        
    // Создаем список аргументов по типу
        let types = {
            'number': v => cols.push(v),  // Количество столбцов
            'function': v => callback = v // Колбэк
        };
        
    // Проходим по списку аргументов
        args.forEach(arg => types[typeof arg](arg));
        
    // Проверяем колбэк
        if (typeof callback == 'function') {
        // Выполняем колбэк (добавляем изменения в таблицу)
            callback.apply(this, this.range(cols));
        }
        
    // Возвращаем текущее окружение
        return this;
    }
    
/*┌────────────────────────────────────────┐
  │ Выравнивает по левому или правому краю │
  └────────────────────────────────────────┘*/
    toPads(list = [], course = 'right') {
    // Переводим в строку
        list = list.map(value => String(value));
        
    // Получаем максимальную длину
        let length = list.reduce((length, value) => {
            return length < value.length ? value.length : length;
        }, 0);
        
    // Возвращаем результат
        return list.map((value) => {
        // Выравниваем по левому краю (отступы справа)
            if (course == 'left') {
                return [value, Array(length+1).join(' ')].join('').substring(0, length);
            }
            
        // Выравниваем по правому краю (отступы слева)
            return [Array(length+1).join(' '), value].join('').slice(length*-1);
        });
    }
    
/*┌───────────────────────────────────────────┐
  │ Удадяет текущий столбец из списка столбцов│
  └───────────────────────────────────────────┘*/
    delete(target = 0) {
    // Обнуляем содержимое таблицы
        delete this.content;
        
    // Удадяем текущий столбец
        delete this.cols[target];
    }
    
/*┌─────────────────────────────────────────────┐
  │ Обновляет текущий столбец в списке столбцов │
  └─────────────────────────────────────────────┘*/
    set(target = 0, col = []) {
    // Обнуляем содержимое таблицы
        delete this.content;
        
    // Обновляем текущий столбец
        this.cols.splice(target < this.cols.length ? target : -1, 1, col);
    }
    
/*┌───────────────────────────────────────────┐
  │ Добавляет новый столбец в список столбцов │
  └───────────────────────────────────────────┘*/
    add(target = 0, col = []) {
    // Обнуляем содержимое таблицы
        delete this.content;
        
    // Индекс целевого столбца меньше нуля
        target = target == -1 ? this.cols.length : target < 0 ? target+1 : target;
        
    // Добавляем новый столбец
        this.cols.splice(target, 0, col);
    }
    
/*┌─────────────────────────────────────────────────────────────────┐
  │ Обновляет текущий или добавляет новый столбец в списке столбцов │
  └─────────────────────────────────────────────────────────────────┘*/
    save(target = 0, col = []) {
    // Проверяем существует-ли целевой столбец
        if (this.isCol(target)) {
        // Обновляем текущий целевой столбец
            this.set(target, col);
        }
        
    // Целевого столбца еще не существует
        else {
        // Создаем новый целевой столбец
            this.add(target, col);
        }
    }
    
/*┌───────────────────────────────────────────────────┐
  │ Проверяет существует-ли столбец в списке столбцов │
  └───────────────────────────────────────────────────┘*/
    isCol(index = 0) {
        return this.cols.length > index ? true : false;
    }
    
/*┌─────────────────────────────────────┐
  │ Получает столбец из списка столбцов │
  └─────────────────────────────────────┘*/
    col(index = 0) {
        return this.cols.slice(index < this.cols.length ? index : -1)[0]||[];
    }
    
/*┌──────────────────────────────────────────────────┐
  │ Получает общую сумму всех чисел текущего столбца │
  └──────────────────────────────────────────────────┘*/
    total(index = 0) {
        return this.col(index).reduce((total, number) => {
            return total + (Number(number)||0);
        }, 0);
    }
    
/*┌────────────────────────────────────────────────┐
  │ Проверяет содержит-ли текущий столбец проценты │
  └────────────────────────────────────────────────┘*/
    isPercents(index = 0) {
    // Получаем общую сумму всех чисел
        let total = this.total(index);
        
    // Проверяем содержит-ли текущий столбец проценты
        return total >= 99 && total <= 101;
    }
    
/*┌────────────────────────────────────┐
  │ Создает новый столбец с процентами │
  └────────────────────────────────────┘*/
    toPercents(numbers = [], digits = 1) {
    // Переводим в число
        numbers = numbers.map(number => Number(number)||0);
        
    // Получаем сумму всех чисел
        let total = numbers.reduce((total, number) => {
            return total + number;
        }, 0);
        
    // Возвращаем список с процентами
        return numbers.map((number) => {
        // Получаем процент
            return parseFloat(number * 100 / total).toFixed(digits);
        });
    }
    
/*┌────────────────────────────────────────────────┐
  │ Добавляет проценты в новый или текущий столбец │
  └────────────────────────────────────────────────┘*/
    percents(source = -1, target = 0) {
    // Проверяем присутствуют-ли цифры в столбце источнике
        if (this.total(source) != 0) {
        // Проверяем существует-ли целевой столбец
            if (this.isPercents(target)) {
            // Обновляем текущий целевой столбец
                this.set(target, this.toPercents(this.col(source)));
            }
            
        // Целевого столбца еще не существует
            else {
            // Создаем новый целевой столбец
                this.add(target, this.toPercents(this.col(source)));
            }
        }
    }
}

/*────────────────────────────────────────────────────────────────────────────────────────────────*/